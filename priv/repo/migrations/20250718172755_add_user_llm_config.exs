defmodule RubberDuck.Repo.Migrations.AddUserLlmConfig do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:user_llm_configs, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(
        :user_id,
        references(:memory_user_profiles,
          column: :user_id,
          name: "user_llm_configs_user_id_fkey",
          type: :text,
          prefix: "public"
        ),
        null: false
      )

      add(:provider, :text, null: false)
      add(:model, :text, null: false)
      add(:is_default, :boolean, null: false, default: false)
      add(:usage_count, :bigint, null: false, default: 0)
      add(:metadata, :map, default: %{})
      add(:created_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    create index(:user_llm_configs, [:user_id, :is_default])

    create index(:user_llm_configs, [:user_id, :provider])

    create index(:user_llm_configs, [:is_default])

    create index(:user_llm_configs, [:provider])

    create index(:user_llm_configs, [:user_id])

    create unique_index(:user_llm_configs, [:user_id, :provider], name: "user_llm_configs_unique_user_provider_index")

    alter table(:memory_user_profiles) do
      add(:llm_preferences, :map, default: %{})
    end
  end

  def down do
    alter table(:memory_user_profiles) do
      remove(:llm_preferences)
    end

    drop_if_exists(
      unique_index(:user_llm_configs, [:user_id, :provider], name: "user_llm_configs_unique_user_provider_index")
    )

    drop(constraint(:user_llm_configs, "user_llm_configs_user_id_fkey"))

    drop_if_exists(index(:user_llm_configs, [:user_id]))

    drop_if_exists(index(:user_llm_configs, [:provider]))

    drop_if_exists(index(:user_llm_configs, [:is_default]))

    drop_if_exists(index(:user_llm_configs, [:user_id, :provider]))

    drop_if_exists(index(:user_llm_configs, [:user_id, :is_default]))

    drop(table(:user_llm_configs))
  end
end
