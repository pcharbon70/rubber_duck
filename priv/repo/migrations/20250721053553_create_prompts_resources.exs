defmodule RubberDuck.Repo.Migrations.CreatePromptsResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:prompts_tags, primary_key: false) do
      add(:prompt_id, :uuid, null: false, primary_key: true)
      add(:tag_id, :uuid, null: false, primary_key: true)
    end

    create table(:prompts_categories, primary_key: false) do
      add(:prompt_id, :uuid, null: false, primary_key: true)
      add(:category_id, :uuid, null: false, primary_key: true)
    end

    create table(:prompts, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:prompts_tags) do
      modify :prompt_id,
             references(:prompts, column: :id, name: "prompts_tags_prompt_id_fkey", type: :uuid, prefix: "public")
    end

    alter table(:prompts_categories) do
      modify :prompt_id,
             references(:prompts, column: :id, name: "prompts_categories_prompt_id_fkey", type: :uuid, prefix: "public")
    end

    alter table(:prompts) do
      add(:title, :text, null: false)
      add(:description, :text)
      add(:content, :text, null: false)
      add(:template_variables, :map, default: %{})
      add(:is_active, :boolean, default: true)
      add(:metadata, :map, default: %{})
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(:user_id, references(:users, column: :id, name: "prompts_user_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )
    end

    create unique_index(:prompts, [:user_id, :title], name: "prompts_user_title_index")

    create table(:prompt_versions, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:version_number, :bigint, null: false)
      add(:content, :text, null: false)
      add(:variables_schema, :map)
      add(:change_description, :text)
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(
        :prompt_id,
        references(:prompts, column: :id, name: "prompt_versions_prompt_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )

      add(
        :created_by_id,
        references(:users, column: :id, name: "prompt_versions_created_by_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )
    end

    create unique_index(:prompt_versions, [:prompt_id, :version_number], name: "prompt_versions_prompt_version_index")

    create table(:prompt_tags, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:prompts_tags) do
      modify :tag_id,
             references(:prompt_tags, column: :id, name: "prompts_tags_tag_id_fkey", type: :uuid, prefix: "public")
    end

    alter table(:prompt_tags) do
      add(:name, :text, null: false)
      add(:color, :text, default: "#6B7280")
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(:user_id, references(:users, column: :id, name: "prompt_tags_user_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )
    end

    create unique_index(:prompt_tags, [:user_id, :name], name: "prompt_tags_user_name_index")

    create table(:prompt_categories, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:prompts_categories) do
      modify :category_id,
             references(:prompt_categories,
               column: :id,
               name: "prompts_categories_category_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:prompt_categories) do
      add(:name, :text, null: false)
      add(:description, :text)
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(
        :user_id,
        references(:users, column: :id, name: "prompt_categories_user_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )

      add(
        :parent_id,
        references(:prompt_categories,
          column: :id,
          name: "prompt_categories_parent_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:prompt_categories, [:user_id, :name], name: "prompt_categories_user_name_index")
  end

  def down do
    drop_if_exists(unique_index(:prompt_categories, [:user_id, :name], name: "prompt_categories_user_name_index"))

    drop(constraint(:prompt_categories, "prompt_categories_user_id_fkey"))

    drop(constraint(:prompt_categories, "prompt_categories_parent_id_fkey"))

    alter table(:prompt_categories) do
      remove(:parent_id)
      remove(:user_id)
      remove(:updated_at)
      remove(:inserted_at)
      remove(:description)
      remove(:name)
    end

    drop(constraint(:prompts_categories, "prompts_categories_category_id_fkey"))

    alter table(:prompts_categories) do
      modify :category_id, :uuid
    end

    drop(table(:prompt_categories))

    drop_if_exists(unique_index(:prompt_tags, [:user_id, :name], name: "prompt_tags_user_name_index"))

    drop(constraint(:prompt_tags, "prompt_tags_user_id_fkey"))

    alter table(:prompt_tags) do
      remove(:user_id)
      remove(:updated_at)
      remove(:inserted_at)
      remove(:color)
      remove(:name)
    end

    drop(constraint(:prompts_tags, "prompts_tags_tag_id_fkey"))

    alter table(:prompts_tags) do
      modify :tag_id, :uuid
    end

    drop(table(:prompt_tags))

    drop_if_exists(
      unique_index(:prompt_versions, [:prompt_id, :version_number], name: "prompt_versions_prompt_version_index")
    )

    drop(constraint(:prompt_versions, "prompt_versions_prompt_id_fkey"))

    drop(constraint(:prompt_versions, "prompt_versions_created_by_id_fkey"))

    drop(table(:prompt_versions))

    drop_if_exists(unique_index(:prompts, [:user_id, :title], name: "prompts_user_title_index"))

    drop(constraint(:prompts, "prompts_user_id_fkey"))

    alter table(:prompts) do
      remove(:user_id)
      remove(:updated_at)
      remove(:inserted_at)
      remove(:metadata)
      remove(:is_active)
      remove(:template_variables)
      remove(:content)
      remove(:description)
      remove(:title)
    end

    drop(constraint(:prompts_categories, "prompts_categories_prompt_id_fkey"))

    alter table(:prompts_categories) do
      modify :prompt_id, :uuid
    end

    drop(constraint(:prompts_tags, "prompts_tags_prompt_id_fkey"))

    alter table(:prompts_tags) do
      modify :prompt_id, :uuid
    end

    drop(table(:prompts))

    drop(table(:prompts_categories))

    drop(table(:prompts_tags))
  end
end
