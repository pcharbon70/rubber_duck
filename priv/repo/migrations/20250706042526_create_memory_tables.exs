defmodule RubberDuck.Repo.Migrations.CreateMemoryTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:memory_user_profiles, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:user_id, :text, null: false)
      add(:preferred_language, :text)
      add(:coding_style, :text)
      add(:experience_level, :text)
      add(:preferences, :map, default: %{})
      add(:learned_patterns, :map, default: %{})
      add(:created_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    create index(:memory_user_profiles, [:user_id])

    create unique_index(:memory_user_profiles, [:user_id], name: "memory_user_profiles_unique_user_index")

    create table(:memory_knowledge, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:user_id, :text, null: false)
      add(:project_id, :text, null: false)
      add(:knowledge_type, :text, null: false)
      add(:title, :text, null: false)
      add(:content, :text, null: false)
      add(:tags, {:array, :text}, default: [])
      add(:relevance_score, :float, null: false, default: 1.0)
      add(:usage_count, :bigint, null: false, default: 0)
      add(:embedding, {:array, :float})
      add(:metadata, :map, default: %{})
      add(:created_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:last_accessed_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    create index(:memory_knowledge, [:tags], using: "gin")

    create index(:memory_knowledge, [:knowledge_type])

    create index(:memory_knowledge, [:user_id, :project_id])

    create table(:memory_code_patterns, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:user_id, :text, null: false)
      add(:language, :text, null: false)
      add(:pattern_name, :text, null: false)
      add(:pattern_code, :text, null: false)
      add(:description, :text)
      add(:pattern_type, :text, null: false)
      add(:usage_count, :bigint, null: false, default: 1)
      add(:embedding, {:array, :float})
      add(:metadata, :map, default: %{})
      add(:created_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:last_used_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    create index(:memory_code_patterns, [:pattern_type])

    create index(:memory_code_patterns, [:user_id, :language])
  end

  def down do
    drop_if_exists(index(:memory_code_patterns, [:user_id, :language]))

    drop_if_exists(index(:memory_code_patterns, [:pattern_type]))

    drop(table(:memory_code_patterns))

    drop_if_exists(index(:memory_knowledge, [:user_id, :project_id]))

    drop_if_exists(index(:memory_knowledge, [:knowledge_type]))

    drop_if_exists(index(:memory_knowledge, [:tags]))

    drop(table(:memory_knowledge))

    drop_if_exists(unique_index(:memory_user_profiles, [:user_id], name: "memory_user_profiles_unique_user_index"))

    drop_if_exists(index(:memory_user_profiles, [:user_id]))

    drop(table(:memory_user_profiles))
  end
end
