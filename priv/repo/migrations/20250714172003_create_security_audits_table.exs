defmodule RubberDuck.Repo.Migrations.CreateSecurityAuditsTable do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:security_audits, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:event_type, :text, null: false)
      add(:user_id, :text)
      add(:session_id, :text)
      add(:ip_address, :text)
      add(:template_hash, :text)
      add(:severity, :text, null: false)
      add(:success, :boolean, null: false)
      add(:details, :map, default: %{})
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    create index(:security_audits, [:user_id, :event_type])

    create index(:security_audits, [:inserted_at])

    create index(:security_audits, [:severity])

    create index(:security_audits, [:event_type])

    create index(:security_audits, [:user_id])

    create unique_index(:security_audits, [:user_id, :template_hash, :event_type, :inserted_at],
             name: "security_audits_unique_event_index"
           )
  end

  def down do
    drop_if_exists(
      unique_index(:security_audits, [:user_id, :template_hash, :event_type, :inserted_at],
        name: "security_audits_unique_event_index"
      )
    )

    drop_if_exists(index(:security_audits, [:user_id]))

    drop_if_exists(index(:security_audits, [:event_type]))

    drop_if_exists(index(:security_audits, [:severity]))

    drop_if_exists(index(:security_audits, [:inserted_at]))

    drop_if_exists(index(:security_audits, [:user_id, :event_type]))

    drop(table(:security_audits))
  end
end
