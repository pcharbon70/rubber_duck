defmodule RubberDuck.Repo.Migrations.CreateSecurityAuditsTable do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:security_audits, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:event_type, :text, null: false)
      add(:user_id, :text)
      add(:session_id, :text)
      add(:ip_address, :text)
      add(:template_hash, :text)
      add(:severity, :text, null: false)
      add(:success, :boolean, null: false)
      add(:details, :map, default: %{})
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    create index(:security_audits, [:user_id, :event_type])

    create index(:security_audits, [:inserted_at])

    create index(:security_audits, [:severity])

    create index(:security_audits, [:event_type])

    create index(:security_audits, [:user_id])

    create unique_index(:security_audits, [:user_id, :template_hash, :event_type, :inserted_at],
             name: "security_audits_unique_event_index"
           )

    create table(:conversations, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:user_id, :uuid, null: false)

      add(
        :project_id,
        references(:projects, column: :id, name: "conversations_project_id_fkey", type: :uuid, prefix: "public")
      )

      add(:title, :text)
      add(:status, :text, null: false, default: "active")
      add(:metadata, :map, default: %{})
      add(:message_count, :bigint, null: false, default: 0)
      add(:last_activity_at, :utc_datetime_usec)
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    create table(:conversation_messages, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(
        :conversation_id,
        references(:conversations,
          column: :id,
          name: "conversation_messages_conversation_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        ),
        null: false
      )

      add(:role, :text, null: false)
      add(:content, :text, null: false)
      add(:sequence_number, :bigint, null: false)

      add(
        :parent_message_id,
        references(:conversation_messages,
          column: :id,
          name: "conversation_messages_parent_message_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      add(:metadata, :map, default: %{})
      add(:tokens_used, :bigint)
      add(:generation_time_ms, :bigint)
      add(:model_used, :text)
      add(:provider_used, :text)
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    create table(:conversation_contexts, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(
        :conversation_id,
        references(:conversations,
          column: :id,
          name: "conversation_contexts_conversation_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        ),
        null: false
      )

      add(:system_prompt, :text)
      add(:context_window_size, :bigint, null: false, default: 4000)
      add(:memory_summary, :text)
      add(:conversation_summary, :text)
      add(:active_topics, {:array, :text}, default: [])
      add(:mentioned_files, {:array, :text}, default: [])
      add(:mentioned_functions, {:array, :text}, default: [])
      add(:conversation_type, :text, null: false, default: "general")
      add(:llm_preferences, :map, default: %{})
      add(:context_metadata, :map, default: %{})
      add(:last_summarized_at, :utc_datetime_usec)
      add(:total_tokens_used, :bigint, null: false, default: 0)
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end
  end

  def down do
    drop(constraint(:conversation_contexts, "conversation_contexts_conversation_id_fkey"))

    drop(table(:conversation_contexts))

    drop(constraint(:conversation_messages, "conversation_messages_conversation_id_fkey"))

    drop(constraint(:conversation_messages, "conversation_messages_parent_message_id_fkey"))

    drop(table(:conversation_messages))

    drop(constraint(:conversations, "conversations_project_id_fkey"))

    drop(table(:conversations))

    drop_if_exists(
      unique_index(:security_audits, [:user_id, :template_hash, :event_type, :inserted_at],
        name: "security_audits_unique_event_index"
      )
    )

    drop_if_exists(index(:security_audits, [:user_id]))

    drop_if_exists(index(:security_audits, [:event_type]))

    drop_if_exists(index(:security_audits, [:severity]))

    drop_if_exists(index(:security_audits, [:inserted_at]))

    drop_if_exists(index(:security_audits, [:user_id, :event_type]))

    drop(table(:security_audits))
  end
end
