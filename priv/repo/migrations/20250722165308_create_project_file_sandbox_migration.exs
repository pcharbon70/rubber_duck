defmodule RubberDuck.Repo.Migrations.CreateProjectFileSandboxMigration do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:projects) do
      add(:root_path, :text)
      add(:file_access_enabled, :boolean, null: false, default: false)
      add(:max_file_size, :bigint, default: 10_485_760)
      add(:allowed_extensions, {:array, :text}, default: [])
      add(:sandbox_config, :map, default: %{})

      add(:owner_id, references(:users, column: :id, name: "projects_owner_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )
    end

    create table(:project_security_audits, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:action, :text, null: false)
      add(:path, :text, null: false)
      add(:status, :text, null: false)
      add(:details, :map, default: %{})
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(
        :project_id,
        references(:projects,
          column: :id,
          name: "project_security_audits_project_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )

      add(
        :user_id,
        references(:users, column: :id, name: "project_security_audits_user_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )
    end

    create unique_index(:project_security_audits, [:project_id, :user_id, :path, :action, :inserted_at],
             name: "project_security_audits_unique_audit_entry_index"
           )

    create table(:project_collaborators, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:permission, :text, null: false, default: "read")
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(
        :project_id,
        references(:projects, column: :id, name: "project_collaborators_project_id_fkey", type: :uuid, prefix: "public"),
        primary_key: true,
        null: false
      )

      add(
        :user_id,
        references(:users, column: :id, name: "project_collaborators_user_id_fkey", type: :uuid, prefix: "public"),
        primary_key: true,
        null: false
      )
    end

    create unique_index(:project_collaborators, [:project_id, :user_id],
             name: "project_collaborators_unique_collaborator_index"
           )
  end

  def down do
    drop_if_exists(
      unique_index(:project_collaborators, [:project_id, :user_id],
        name: "project_collaborators_unique_collaborator_index"
      )
    )

    drop(constraint(:project_collaborators, "project_collaborators_project_id_fkey"))

    drop(constraint(:project_collaborators, "project_collaborators_user_id_fkey"))

    drop(table(:project_collaborators))

    drop_if_exists(
      unique_index(:project_security_audits, [:project_id, :user_id, :path, :action, :inserted_at],
        name: "project_security_audits_unique_audit_entry_index"
      )
    )

    drop(constraint(:project_security_audits, "project_security_audits_project_id_fkey"))

    drop(constraint(:project_security_audits, "project_security_audits_user_id_fkey"))

    drop(table(:project_security_audits))

    drop(constraint(:projects, "projects_owner_id_fkey"))

    alter table(:projects) do
      remove(:owner_id)
      remove(:sandbox_config)
      remove(:allowed_extensions)
      remove(:max_file_size)
      remove(:file_access_enabled)
      remove(:root_path)
    end
  end
end
