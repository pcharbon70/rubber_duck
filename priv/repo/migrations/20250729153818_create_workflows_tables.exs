defmodule RubberDuck.Repo.Migrations.CreateWorkflowsTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:workflows, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:workflow_id, :text, null: false)
      add(:module, :text, null: false)
      add(:status, :text, null: false, default: "running")
      add(:reactor_state, :map, null: false, default: %{})
      add(:context, :map, null: false, default: %{})
      add(:metadata, :map, null: false, default: %{})
      add(:error, :map)
      add(:completed_at, :utc_datetime)
      add(:created_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    create index(:workflows, [:workflow_id], unique: true)

    create index(:workflows, [:updated_at])

    create index(:workflows, [:created_at])

    create index(:workflows, [:module])

    create index(:workflows, [:status])

    create table(:workflow_versions, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:module, :text, null: false)
      add(:version, :text, null: false)
      add(:compatibility, :text, null: false, default: "*")
      add(:is_current, :boolean, null: false, default: false)
      add(:definition, :map, null: false, default: %{})
      add(:migrations, :map, null: false, default: %{})
      add(:metadata, :map, null: false, default: %{})
      add(:registered_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    create index(:workflow_versions, [:registered_at])

    create index(:workflow_versions, [:module, :version], unique: true)

    create index(:workflow_versions, [:version])

    create index(:workflow_versions, [:module])

    create table(:workflow_checkpoints, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:checkpoint_id, :text, null: false)
      add(:workflow_id, :text, null: false)
      add(:step_name, :text, null: false)
      add(:state, :map, null: false, default: %{})
      add(:metadata, :map, null: false, default: %{})
      add(:created_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    create index(:workflow_checkpoints, [:workflow_id, :created_at])

    create index(:workflow_checkpoints, [:checkpoint_id], unique: true)

    create index(:workflow_checkpoints, [:created_at])

    create index(:workflow_checkpoints, [:workflow_id])
  end

  def down do
    drop_if_exists(index(:workflow_checkpoints, [:workflow_id]))

    drop_if_exists(index(:workflow_checkpoints, [:created_at]))

    drop_if_exists(index(:workflow_checkpoints, [:checkpoint_id]))

    drop_if_exists(index(:workflow_checkpoints, [:workflow_id, :created_at]))

    drop(table(:workflow_checkpoints))

    drop_if_exists(index(:workflow_versions, [:module]))

    drop_if_exists(index(:workflow_versions, [:version]))

    drop_if_exists(index(:workflow_versions, [:module, :version]))

    drop_if_exists(index(:workflow_versions, [:registered_at]))

    drop(table(:workflow_versions))

    drop_if_exists(index(:workflows, [:status]))

    drop_if_exists(index(:workflows, [:module]))

    drop_if_exists(index(:workflows, [:created_at]))

    drop_if_exists(index(:workflows, [:updated_at]))

    drop_if_exists(index(:workflows, [:workflow_id]))

    drop(table(:workflows))
  end
end
