defmodule RubberDuck.Repo.Migrations.AddCodeFileAndAnalysisResult do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:code_files, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:file_path, :text, null: false)
      add(:content, :text)
      add(:language, :text)
      add(:ast_cache, :map, default: %{})
      add(:embeddings, {:array, :float})
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(
        :project_id,
        references(:projects, column: :id, name: "code_files_project_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )
    end

    create table(:analysis_results, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:analysis_type, :text, null: false)
      add(:results, :map, null: false, default: %{})
      add(:severity, :text)
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(
        :code_file_id,
        references(:code_files, column: :id, name: "analysis_results_code_file_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )
    end
  end

  def down do
    drop(constraint(:analysis_results, "analysis_results_code_file_id_fkey"))

    drop(table(:analysis_results))

    drop(constraint(:code_files, "code_files_project_id_fkey"))

    drop(table(:code_files))
  end
end
