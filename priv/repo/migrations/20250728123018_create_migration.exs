defmodule RubberDuck.Repo.Migrations.CreateMigration do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:tasks) do
      add(:number, :text)
      add(:phase_id, :uuid)
      add(:parent_id, :uuid)
    end

    create index(:tasks, [:number])

    create index(:tasks, [:phase_id, :position])

    create index(:tasks, [:parent_id])

    create index(:tasks, [:phase_id])

    create table(:phases, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:tasks) do
      modify :phase_id, references(:phases, column: :id, name: "tasks_phase_id_fkey", type: :uuid, prefix: "public")
      modify :parent_id, references(:tasks, column: :id, name: "tasks_parent_id_fkey", type: :uuid, prefix: "public")
    end

    alter table(:phases) do
      add(:name, :text, null: false)
      add(:description, :text)
      add(:position, :bigint, null: false, default: 0)
      add(:metadata, :map, default: %{})
      add(:created_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(:plan_id, references(:plans, column: :id, name: "phases_plan_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )
    end

    create index(:phases, [:plan_id, :position])

    create index(:phases, [:position])

    create index(:phases, [:plan_id])
  end

  def down do
    drop(constraint(:phases, "phases_plan_id_fkey"))

    drop_if_exists(index(:phases, [:plan_id]))

    drop_if_exists(index(:phases, [:position]))

    drop_if_exists(index(:phases, [:plan_id, :position]))

    alter table(:phases) do
      remove(:plan_id)
      remove(:updated_at)
      remove(:created_at)
      remove(:metadata)
      remove(:position)
      remove(:description)
      remove(:name)
    end

    drop(constraint(:tasks, "tasks_phase_id_fkey"))

    drop(constraint(:tasks, "tasks_parent_id_fkey"))

    alter table(:tasks) do
      modify :parent_id, :uuid
      modify :phase_id, :uuid
    end

    drop(table(:phases))

    drop_if_exists(index(:tasks, [:phase_id]))

    drop_if_exists(index(:tasks, [:parent_id]))

    drop_if_exists(index(:tasks, [:phase_id, :position]))

    drop_if_exists(index(:tasks, [:number]))

    alter table(:tasks) do
      remove(:parent_id)
      remove(:phase_id)
      remove(:number)
    end
  end
end
