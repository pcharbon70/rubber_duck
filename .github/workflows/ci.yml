name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MIX_ENV: test

permissions:
  contents: read

jobs:
  test:
    name: Test (Elixir ${{ matrix.elixir }} / OTP ${{ matrix.otp }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - elixir: "1.18.0"
            otp: "27.1"
          - elixir: "1.18.1"
            otp: "27.2"
    
    services:
      db:
        image: postgres:15
        ports: ['5432:5432']
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rubber_duck_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      id: beam
      with:
        elixir-version: ${{ matrix.elixir }}
        otp-version: ${{ matrix.otp }}

    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: deps
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-

    - name: Restore build cache
      uses: actions/cache@v4
      with:
        path: _build
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-build-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-build-

    - name: Install dependencies
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get

    - name: Compile with warnings as errors
      run: mix compile --warnings-as-errors

    - name: Check formatting
      run: mix format --check-formatted

    - name: Run tests with coverage
      run: mix coveralls.github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

    - name: Check unused dependencies
      run: mix deps.unlock --check-unused
      if: matrix.elixir == '1.18.1'  # Only run on latest version

  credo:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: "1.18.1"
        otp-version: "27.2"

    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: deps
        key: ${{ runner.os }}-27.2-1.18.1-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-27.2-1.18.1-mix-

    - name: Restore build cache
      uses: actions/cache@v4
      with:
        path: _build
        key: ${{ runner.os }}-27.2-1.18.1-build-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-27.2-1.18.1-build-

    - name: Install dependencies
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get

    - name: Run Credo
      run: mix credo --strict

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: "1.18.1"
        otp-version: "27.2"

    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: deps
        key: ${{ runner.os }}-27.2-1.18.1-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-27.2-1.18.1-mix-

    - name: Install dependencies
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get

    - name: Run security audit
      run: |
        mix hex.audit
        mix deps.audit || true  # Continue even if this fails as it might not be available