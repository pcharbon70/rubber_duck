#!/bin/bash
# Pre-commit hook for RubberDuck project
# Runs formatting and linting checks before allowing commits

set -e

echo "🦆 RubberDuck Pre-commit Hook Running..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the list of staged Elixir files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ex|exs)$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo "No Elixir files staged for commit."
    exit 0
fi

echo "Checking staged files:"
echo "$STAGED_FILES"
echo ""

# Function to check if mix is available
check_mix() {
    if ! command -v mix &> /dev/null; then
        echo -e "${RED}Error: 'mix' command not found. Please ensure Elixir is installed.${NC}"
        exit 1
    fi
}

# Function to run formatter check
run_formatter_check() {
    echo "Running formatter check..."
    
    # Create a temporary file with staged file paths
    TEMP_FILE=$(mktemp)
    echo "$STAGED_FILES" > "$TEMP_FILE"
    
    # Check formatting for staged files only
    UNFORMATTED_FILES=""
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            if ! mix format --check-formatted "$file" 2>/dev/null; then
                UNFORMATTED_FILES="$UNFORMATTED_FILES$file\n"
            fi
        fi
    done < "$TEMP_FILE"
    
    rm "$TEMP_FILE"
    
    if [ -n "$UNFORMATTED_FILES" ]; then
        echo -e "${RED}❌ Formatting check failed!${NC}"
        echo -e "${RED}The following files are not properly formatted:${NC}"
        echo -e "$UNFORMATTED_FILES"
        echo -e "${YELLOW}Run 'mix format' to fix formatting issues.${NC}"
        return 1
    else
        echo -e "${GREEN}✓ All files are properly formatted${NC}"
        return 0
    fi
}

# Function to run compilation check
run_compile_check() {
    echo "Running compilation check..."
    
    if mix compile --warnings-as-errors --force 2>&1 | grep -E "(warning:|error:)"; then
        echo -e "${RED}❌ Compilation check failed!${NC}"
        echo -e "${YELLOW}Fix compilation warnings and errors before committing.${NC}"
        return 1
    else
        echo -e "${GREEN}✓ Compilation successful with no warnings${NC}"
        return 0
    fi
}

# Function to run Credo linting (if available)
run_credo_check() {
    if mix deps.get credo &>/dev/null; then
        echo "Running Credo linting..."
        
        # Create a temporary file listing staged files
        TEMP_FILE=$(mktemp)
        echo "$STAGED_FILES" > "$TEMP_FILE"
        
        # Run credo on staged files
        CREDO_ISSUES=0
        while IFS= read -r file; do
            if [ -f "$file" ]; then
                if ! mix credo "$file" --strict 2>/dev/null; then
                    CREDO_ISSUES=1
                fi
            fi
        done < "$TEMP_FILE"
        
        rm "$TEMP_FILE"
        
        if [ $CREDO_ISSUES -eq 1 ]; then
            echo -e "${RED}❌ Credo found issues!${NC}"
            echo -e "${YELLOW}Fix linting issues before committing.${NC}"
            return 1
        else
            echo -e "${GREEN}✓ Credo linting passed${NC}"
            return 0
        fi
    else
        echo "Credo not installed, skipping linting check."
        return 0
    fi
}

# Main execution
check_mix

# Track if any check fails
FAILED=0

# Run all checks
if ! run_formatter_check; then
    FAILED=1
fi

if ! run_compile_check; then
    FAILED=1
fi

if ! run_credo_check; then
    FAILED=1
fi

# Exit with appropriate code
if [ $FAILED -eq 1 ]; then
    echo ""
    echo -e "${RED}❌ Pre-commit checks failed. Please fix the issues and try again.${NC}"
    exit 1
else
    echo ""
    echo -e "${GREEN}✅ All pre-commit checks passed!${NC}"
    exit 0
fi